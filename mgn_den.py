import copy
import torch
from torch import nn
from torch.nn import init
from torch.autograd import Variable
from modified_densenet import densenet121

class mgn_dense(nn.Module):
	def __init__(self):
		super(mgn_dense, self).__init__()

		model_ft = densenet121(pretrained=True)
		block4 = copy.deepcopy(model_ft.features.denseblock4)
		transition3 = copy.deepcopy(model_ft.features.transition3)
		norm5 = copy.deepcopy(model_ft.features.norm5)
		model_ft.features.transition3 = nn.Sequential()
		model_ft.features.denseblock4 = nn.Sequential()
		model_ft.features.norm5 = nn.Sequential()
		self.base_mode = model_ft
############################## global
		self.global_transition3 = copy.deepcopy(transition3)
		self.global_block4 = copy.deepcopy(block4)
		self.global_norm5 = copy.deepcopy(norm5)
		self.global_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.global_reduce = nn.Conv2d(in_channels=1024, out_channels=256, kernel_size=1, bias=False)
		init.normal_(self.global_reduce.weight, std=0.01)
		self.global_norm = nn.BatchNorm2d(num_features=256)
		init.normal_(self.global_norm.weight, std=0.01)
		self.global_prelu = nn.PReLU(256, 0.25)
		self.global_fc = nn.Linear(in_features=1024, out_features=256)
		init.normal_(self.global_fc.weight, std=0.01)
		self.global_bottle = nn.Sequential(
			nn.BatchNorm1d(num_features=256),
			nn.PReLU(256, 0.25),
			nn.Dropout(0.5)
		)
		init.normal_(self.global_bottle[0].weight, std=0.01)
		self.global_1024_linear = nn.Linear(in_features=256, out_features=751, bias=False)
		init.normal_(self.global_1024_linear.weight, std=0.01)
############################## part2
		self.part2_transition3 = copy.deepcopy(transition3)
		self.part2_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part2_block4 = copy.deepcopy(block4)
		self.part2_norm5 = copy.deepcopy(norm5)
		self.part2_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part2_reduce = copy.deepcopy(self.global_reduce)
		self.part2_norm = copy.deepcopy(self.global_norm)
		self.part2_prelu = copy.deepcopy(self.global_prelu)
		self.part2_fc = copy.deepcopy(self.global_fc)
		self.part2_bottle = copy.deepcopy(self.global_bottle)
		self.part2_1024 = copy.deepcopy(self.global_1024_linear)

		self.part2_1_transition3 = copy.deepcopy(transition3)
		self.part2_1_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part2_1_block4 = copy.deepcopy(block4)
		self.part2_1_norm5 = copy.deepcopy(norm5)
		self.part2_1_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part2_1_reduce = copy.deepcopy(self.global_reduce)
		self.part2_1_bottle = copy.deepcopy(self.global_bottle)
		self.part2_1_linear = copy.deepcopy(self.global_1024_linear)

		self.part2_2_transition3 = copy.deepcopy(transition3)
		self.part2_2_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part2_2_block4 = copy.deepcopy(block4)
		self.part2_2_norm5 = copy.deepcopy(norm5)
		self.part2_2_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part2_2_reduce = copy.deepcopy(self.global_reduce)
		self.part2_2_bottle = copy.deepcopy(self.global_bottle)
		self.part2_2_linear = copy.deepcopy(self.global_1024_linear)
############################## part3
		self.part3_transition3 = copy.deepcopy(transition3)
		self.part3_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part3_block4 = copy.deepcopy(block4)
		self.part3_norm5 = copy.deepcopy(norm5)
		self.part3_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part3_reduce = copy.deepcopy(self.global_reduce)
		self.part3_norm = copy.deepcopy(self.global_norm)
		self.part3_prelu = copy.deepcopy(self.global_prelu)
		self.part3_fc = copy.deepcopy(self.global_fc)
		self.part3_bottle = copy.deepcopy(self.global_bottle)
		self.part3_1024 = copy.deepcopy(self.global_1024_linear)

		self.part3_1_transition3 = copy.deepcopy(transition3)
		self.part3_1_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part3_1_block4 = copy.deepcopy(block4)
		self.part3_1_norm5 = copy.deepcopy(norm5)
		self.part3_1_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part3_1_reduce = copy.deepcopy(self.global_reduce)
		self.part3_1_bottle = copy.deepcopy(self.global_bottle)
		self.part3_1_linear = copy.deepcopy(self.global_1024_linear)

		self.part3_2_transition3 = copy.deepcopy(transition3)
		self.part3_2_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part3_2_block4 = copy.deepcopy(block4)
		self.part3_2_norm5 = copy.deepcopy(norm5)
		self.part3_2_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part3_2_reduce = copy.deepcopy(self.global_reduce)
		self.part3_2_bottle = copy.deepcopy(self.global_bottle)
		self.part3_2_linear = copy.deepcopy(self.global_1024_linear)

		self.part3_3_transition3 = copy.deepcopy(transition3)
		self.part3_3_transition3.pool = nn.AdaptiveAvgPool2d((24, 8))
		self.part3_3_block4 = copy.deepcopy(block4)
		self.part3_3_norm5 = copy.deepcopy(norm5)
		self.part3_3_avg = nn.AdaptiveAvgPool2d((1, 1))
		self.part3_3_reduce = copy.deepcopy(self.global_reduce)
		self.part3_3_bottle = copy.deepcopy(self.global_bottle)
		self.part3_3_linear = copy.deepcopy(self.global_1024_linear)

	def forward(self, output, flag):
		output = self.base_mode.features(output)
############################## global
		global_output = self.global_transition3(output)
		global_output = self.global_block4(global_output)
		global_output = self.global_norm5(global_output)
		global_output = self.global_avg(global_output)
		global_256 = self.global_reduce(global_output)
		# global_256 = self.global_norm(global_256)
		# global_256 = self.global_prelu(global_256)
		global_256 = global_256.view(global_256.size(0), -1)
############################## part2
		part2_output = self.part2_transition3(output)
		part2_output = self.part2_block4(part2_output)
		part2_output = self.part2_norm5(part2_output)
		part2_1024 = self.part2_avg(part2_output)
		part2_256 = self.part2_reduce(part2_1024)
		# part2_256 = self.part2_norm(part2_256)
		# part2_256 = self.part2_prelu(part2_256)
		part2_256 = part2_256.view(part2_256.size(0), -1)

		part2_slice1, part2_slice2 = torch.chunk(output, chunks=2, dim=2)
		part2_slice1 = part2_slice1.contiguous()
		part2_slice1 = self.part2_1_transition3(part2_slice1)
		part2_slice1 = self.part2_1_block4(part2_slice1)
		part2_slice1 = self.part2_1_norm5(part2_slice1)
		part2_slice1 = self.part2_1_avg(part2_slice1)
		part2_slice1 = self.part2_1_reduce(part2_slice1)
		part2_slice1 = part2_slice1.view(part2_slice1.size(0), -1)
		# part2_slice1 = self.part2_1_bottle(part2_slice1)

		part2_slice2 = part2_slice2.contiguous()
		part2_slice2 = self.part2_2_transition3(part2_slice2)
		part2_slice2 = self.part2_2_block4(part2_slice2)
		part2_slice2 = self.part2_2_norm5(part2_slice2)
		part2_slice2 = self.part2_2_avg(part2_slice2)
		part2_slice2 = self.part2_2_reduce(part2_slice2)
		part2_slice2 = part2_slice2.view(part2_slice2.size(0), -1)
		# part2_slice2 = self.part2_2_bottle(part2_slice2)
############################## part3
		part3_output = self.part3_transition3(output)
		part3_output = self.part3_block4(part3_output)
		part3_output = self.part3_norm5(part3_output)
		part3_1024 = self.part3_avg(part3_output)
		part3_256 = self.part3_reduce(part3_1024)
		# part3_256 = self.part3_norm(part3_256)
		# part3_256 = self.part3_prelu(part3_256)
		part3_256 = part3_256.view(part3_256.size(0), -1)

		part3_slice1, part3_slice2, part3_slice3 = torch.chunk(output, chunks=3, dim=2)
		part3_slice1 = part3_slice1.contiguous()
		part3_slice1 = self.part3_1_transition3(part3_slice1)
		part3_slice1 = self.part3_1_block4(part3_slice1)
		part3_slice1 = self.part3_1_norm5(part3_slice1)
		part3_slice1 = self.part3_1_avg(part3_slice1)
		part3_slice1 = self.part3_1_reduce(part3_slice1)
		part3_slice1 = part3_slice1.view(part3_slice1.size(0), -1)
		# part3_slice1 = self.part3_1_bottle(part3_slice1)

		part3_slice2 = part3_slice2.contiguous()
		part3_slice2 = self.part3_2_transition3(part3_slice2)
		part3_slice2 = self.part3_2_block4(part3_slice2)
		part3_slice2 = self.part3_2_norm5(part3_slice2)
		part3_slice2 = self.part3_2_avg(part3_slice2)
		part3_slice2 = self.part3_2_reduce(part3_slice2)
		part3_slice2 = part3_slice2.view(part3_slice2.size(0), -1)
		# part3_slice2 = self.part3_2_bottle(part3_slice2)

		part3_slice3 = part3_slice3.contiguous()
		part3_slice3 = self.part3_3_transition3(part3_slice3)
		part3_slice3 = self.part3_3_block4(part3_slice3)
		part3_slice3 = self.part3_3_norm5(part3_slice3)
		part3_slice3 = self.part3_3_avg(part3_slice3)
		part3_slice3 = self.part3_3_reduce(part3_slice3)
		part3_slice3 = part3_slice3.view(part3_slice3.size(0), -1)
		# part3_slice3 = self.part3_3_bottle(part3_slice3)
		if flag:
			global_output = global_output.view(global_output.size(0), -1)
			global_output = self.global_fc(global_output)
			global_output = self.global_bottle(global_output)
			global_output = self.global_1024_linear(global_output)
			part2_1024 = part2_1024.view(part2_1024.size(0), -1)
			part2_1024 = self.part2_fc(part2_1024)
			part2_1024 = self.part2_bottle(part2_1024)
			part2_1024 = self.part2_1024(part2_1024)
			part3_1024 = part3_1024.view(part3_1024.size(0), -1)
			part3_1024 = self.part3_fc(part3_1024)
			part3_1024 = self.part3_bottle(part3_1024)
			part3_1024 = self.part3_1024(part3_1024)
			part2_slice1 = self.part2_1_linear(part2_slice1)
			part2_slice2 = self.part2_2_linear(part2_slice2)
			part3_slice1 = self.part3_1_linear(part3_slice1)
			part3_slice2 = self.part3_2_linear(part3_slice2)
			part3_slice3 = self.part3_3_linear(part3_slice3)

			return {'softmax': [global_output, part2_1024, part3_1024, part2_slice1, part2_slice2, part3_slice1, part3_slice2, part3_slice3],
					'triplet': [global_256, part2_256, part3_256]}
		else:
			return torch.cat([global_256, part2_256, part3_256, part2_slice1, part2_slice2, part3_slice1, part3_slice2, part3_slice3], dim=1)

if __name__ == '__main__':
	# print(mgn_dense(1024, ))
	net = mgn_dense()
	x = Variable(torch.randn(2,3,384,128))
	y = net(x, False)
	print(y.size())
